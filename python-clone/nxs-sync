#!/usr/bin/env python3

import yaml
import subprocess
import argparse
import pycurl
import xml.etree.ElementTree as ET
import os
import base64
import smtplib

with open("conf.yaml") as stream:
    try:
        config = yaml.load(stream)
    except yaml.YAMLError as exc:
        print(exc)

def get_user(s):
    for i in config['server'][s]['connect']:
        if i[:4] == 'pass':
            q=i.split()[2]
            continue
        if i[:4] == 'user':
            r=i.split()[2]
            continue
    return(r,q)

def send_message(q):
    from email.mime.text import MIMEText
    
    Subject = 'used '+str(q)+'%'
    msg = MIMEText(Subject)
    msg['Subject'] = 'Storage alert'
    msg['To'] = 'a.zhideev@nixys.ru'

    s = smtplib.SMTP('localhost')
    s.send_message(msg)
    s.quit()
    return()

def get_size(s):
    t = get_user(s)
    command = "curl --silent -u " + t[0] +':'+ t[1]+"  -X PROPFIND  \'https://storage.nixys.ru/remote.php/webdav/\' | xmllint --format -"
    print(command)
    p = subprocess.Popen(command, shell=True,  stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    o = ET.fromstring(out)
    used = int(o[0][1][0][2].text)
    all = int(o[0][1][0][3].text)
    d = round(used/all, 3)
    print ('storage used: ', d,'%')
    q = int(config['server'][s]['quota'])
    #if d > q:
     #   send_message(d)
    return (d)

def get_pass (s):
    cmd = 'rclone obscure '+ str(s)
    p = subprocess.Popen(cmd, shell=True,  stdout=subprocess.PIPE)
    out = p.stdout.read().decode('utf-8')
    return (out)

def create_conf(s):
    f = open('rclone-new.conf', 'w')
    f.write('['+s+']'+'\n' )
    for i in config['server'][s]['connect']:
        if i[:4] == 'pass':
            q=i.split()[2]
            f.write('pass = '+ get_pass(q) +'\n')
            continue
        f.write(i +'\n')
    f.close()
    print ('config file created')
    return ()

def sync_start(s):
    excludes = " --exclude ".join(config['server'][s]['excludes'])
    keys = " ".join(config['server'][s]['keys'])
    cmd = 'rclone --config rclone-new.conf --log-file='+ config['server'][s]['logfile_path']+ s+'-storage-sync.log --log-level ' + config['server'][s]['loglevel'] + ' sync '+ config['server'][s]['source']+ ' '+ s +':'+ config['server'][s]['destination']+' --exclude '+ excludes + ' --exclude-from '+ config['server'][s]['excludes_file']+' --bwlimit='+config['server'][s]['bandwidth'] + ' '+keys
    return cmd

def trim_slash(s):
    if s[:1] == '/':
        s = s[1:]
    return (s)



def parse_args():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='cmd', help='List of commands')

    list_parser = subparsers.add_parser('ls', help='ls command')
    list_parser.add_argument('servername', type=str, help='Remote server name')
    list_parser.add_argument('dirname', type=str, help='Directory to list, / for root')

    tree_parser = subparsers.add_parser('tree', help='tree command')
    tree_parser.add_argument('servername', type=str, help='Remote server name')
    tree_parser.add_argument('dirname', type=str, help='Directory to list, / for root')

    copy_parser = subparsers.add_parser('copy', help='copy [From] [To]')
    copy_parser.add_argument('source', help='From')
    copy_parser.add_argument('destination', help='To:')

    start_parser = subparsers.add_parser('start', help='start')
    start_parser.add_argument('servername', type=str, help='Remote server name')

    return parser.parse_args()

args = parse_args()
if args.cmd == 'ls':
    args.dirname = trim_slash(args.dirname)
    print (args.dirname)
    command = 'rclone --config rclone-new.conf --dry-run lsl ' + args.servername+ ':'+args.dirname
    print (command)
    p = subprocess.Popen(command, shell=True,  stdout=subprocess.PIPE)
    lsout = p.stdout.read().decode('utf-8')
    print (lsout)
elif args.cmd == 'tree':
    args.dirname = trim_slash(args.dirname)
    print (args.dirname)
    command = 'rclone --config rclone-new.conf --dry-run tree  --log-file=storage-sync.log ' + args.servername+ ':'+args.dirname
    print (command)
    p = subprocess.Popen(command, shell=True,  stdout=subprocess.PIPE)
    lsout = p.stdout.read().decode('utf-8')
    print (lsout)
elif args.cmd == 'copy':
    command = 'rclone --config rclone-new.conf --log-file=storage-sync.log --log-level INFO copy ' + args.source + ' ' + args.destination
    print (command)
    subprocess.Popen(command, shell=True,  stdout=subprocess.PIPE)
elif args.cmd == 'start':
    create_conf(args.servername)
    if args.servername == 'nxs':
        get_size(args.servername)
    command = sync_start(args.servername)
    subprocess.Popen(command, shell=True)
    #os.remove('rclone-new.conf')
else:
    print ('use --help')

